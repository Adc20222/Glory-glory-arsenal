
#include <iostream>
#include <sstream>
#include <string>
using namespace std;

#define length(array) ((sizeof(array)) / (sizeof(array[0])))

struct CharALNode {
    char* CharArrayList;
    CharALNode* next;
};

class  ConcatStringList {
public:
    int listSize = 0;
    CharALNode Chess{

    };
    CharALNode* phead;
    CharALNode* ptail;
    ConcatStringList(const char* s) {
        Chess.CharArrayList = new char[length(s) + 1];
        Chess.next = NULL;
        int i = 0;
        while (s[i] != NULL) {
            Chess.CharArrayList[i] = s[i];
            listSize++;
            i++;
        }
        phead = ptail = new CharALNode;
    }
    ConcatStringList() {

    }
    int getLength() const {
        return listSize;
    }
    void printList() {
        for (int i = 0; i < getLength(); i++) {
            cout << Chess.CharArrayList[i];
        }
    }
    char get(int index) const {
        if (index < 0 || index > getLength()) {
            throw out_of_range("Index of string is invalid!");
        }
        return Chess.CharArrayList[index];
    }
    int indexOf(char c) const {
        for (int i = 0; i < getLength(); i++) {
            if (Chess.CharArrayList[i] == c) {
                return i;
            }
        }
        return -1;
    }
    ConcatStringList concat(const ConcatStringList& otherS) const {
        ConcatStringList s4;
        CharALNode* ptr1 = this->phead;
        CharALNode* ptr2 = otherS.phead;
        s4.listSize = this->listSize + otherS.listSize;
        s4.Chess.CharArrayList = new char[listSize + 1];
        s4.phead = ptr1;
        for (int i = 0; i < this->listSize; i++) {
            s4.Chess.CharArrayList[i] = ptr1->CharArrayList[i];
            ptr1 = ptr1->next;
        }
        ptr1->next = ptr2;
        int j = 0;
        for (int k = this->listSize ; k < s4.listSize; k++) {
            s4.Chess.CharArrayList[k] = ptr2->CharArrayList[j];
            ptr2 = ptr2->next;
            j++;
        }
        s4.ptail = ptr2;
        return s4;
    }

};

int main()
{
    ConcatStringList s1("node22 1");
    ConcatStringList s2("node 2");
    ConcatStringList s7 = s1.concat(s2);
    cout << s2.getLength();
    cout << s7.getLength();





}
